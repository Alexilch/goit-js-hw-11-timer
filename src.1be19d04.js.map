{"version":3,"sources":["js/timer.js","index.js"],"names":["CountdownTimer","targetDate","selector","intervalId","timeR","_refs","refS","refs","days","document","querySelector","hours","mins","secs","currentTime","clearInterval","setInterval","deltaTime","Date","now","getTimeMathandUpdate","value","String","padStart","time","pad","Math","floor","textContent","timer"],"mappings":";;;AA8CA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9CMA,IAAAA,EAAAA,WACgC,SAAA,EAAA,GAAvBC,IAAAA,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,SAAW,EAAA,KAAA,GAC7BD,KAAAA,WAAaA,EAClB,KAAKE,WAAa,KAClB,KAAKC,QACL,KAAKC,MAAQ,KAAKC,KAAKJ,GAyC3B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OArCE,MAAA,SAAKA,GACKK,IAAAA,EAAO,GAKRA,OAJLA,EAAKC,KAAOC,SAASC,cAAiBR,GAAAA,OAAAA,EAAtC,yBACAK,EAAKI,MAAQF,SAASC,cAAiBR,GAAAA,OAAAA,EADvC,0BAEAK,EAAKK,KAAOH,SAASC,cAAiBR,GAAAA,OAAAA,EAFtC,yBAGAK,EAAKM,KAAOJ,SAASC,cAAiBR,GAAAA,OAAAA,EAHtC,yBAIKK,IA+BX,CAAA,IAAA,QA5BE,MAAA,WAAQ,IAAA,EAAA,KACF,KAAKO,aAAe,GACtBC,cAAc,KAAKZ,YAEhBA,KAAAA,WAAaa,YAAY,WACtBC,IAAAA,EAAY,EAAKhB,WAAaiB,KAAKC,MACzC,EAAKC,qBAAqBH,IACzB,OAqBP,CAAA,IAAA,MAlBE,MAAA,SAAII,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OAiBrC,CAAA,IAAA,uBAdE,MAAA,SAAqBC,GACfhB,IAAAA,EAAO,KAAKiB,IAAIC,KAAKC,MAAMH,EAAQ,QACnCb,EAAQ,KAAKc,IAAIC,KAAKC,MAAOH,EAAQ,MAAyB,OAC9DZ,EAAO,KAAKa,IAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MACxDX,EAAO,KAAKY,IAAIC,KAAKC,MAAOH,EAAQ,IAAc,MAEnDnB,KAAAA,MAAMG,KAAKoB,YAAcpB,EACzBH,KAAAA,MAAMM,MAAMiB,YAAcjB,EAC1BN,KAAAA,MAAMO,KAAKgB,YAAchB,EACzBP,KAAAA,MAAMQ,KAAKe,YAAcf,MAKhC,EA9CMb,GA8CA6B,EAAQ,IAAI7B,EAAe,CAC/BE,SAAU,WACVD,WAAY,IAAIiB,KAAK;;AC/CvB,aADA,QAAA,oBACA,QAAA","file":"src.1be19d04.js","sourceRoot":"..\\src","sourcesContent":["class CountdownTimer {\r\n  constructor({targetDate, selector}) {\r\n    this.targetDate = targetDate,\r\n    this.intervalId = null,\r\n    this.timeR(),\r\n    this._refs = this.refS(selector)\r\n    \r\n  };\r\n  \r\n  refS(selector) {\r\n      const refs = [];\r\n      refs.days = document.querySelector(`${selector} [data-value=\"days\"]`),\r\n      refs.hours = document.querySelector(`${selector} [data-value=\"hours\"]`),\r\n      refs.mins = document.querySelector(`${selector} [data-value=\"mins\"]`),\r\n      refs.secs = document.querySelector(`${selector} [data-value=\"secs\"]`)\r\n    return refs;\r\n  }\r\n  \r\n  timeR() {\r\n    if (this.currentTime <= 0) {\r\n      clearInterval(this.intervalId);\r\n    }\r\n    this.intervalId = setInterval(() => {\r\n      const deltaTime = this.targetDate - Date.now();\r\n      this.getTimeMathandUpdate(deltaTime);\r\n    }, 1000)\r\n  }\r\n\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n    };\r\n\r\n  getTimeMathandUpdate(time) {\r\n  const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n  const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n  const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n  const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n \r\n  this._refs.days.textContent = days;\r\n  this._refs.hours.textContent = hours;\r\n  this._refs.mins.textContent = mins;\r\n  this._refs.secs.textContent = secs;\r\n  };\r\n}\r\n\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Oct 13, 2021'),\r\n});\r\n\r\n\r\n\r\n","import './sass/main.scss';\r\nimport './js/timer'"]}